# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        temp=head
        cnt=0
        while temp:
            cnt+=1
            temp=temp.next
        if cnt==n:
            newHead=head.next
            return newHead
        res=cnt-n
        temp=head
        while temp:
            res-=1
            if res==0:
                break
            temp=temp.next
        delNode=temp.next
        temp.next=temp.next.next
        return head
approach2
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        fast=slow=head
        for i in range(n):
            fast=fast.next
        if fast==None:
            return head.next
        while fast.next != None:
            fast=fast.next
            slow=slow.next
        slow.next=slow.next.next
        return head
        
        
